import { NextRequest, NextResponse } from "next/server";
import { db } from "@/lib/prisma";
import { getRoleFromCookie } from "@/lib/auth";

export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const role = await getRoleFromCookie();
  if (role !== "admin") {
    return new NextResponse("Unauthorized", { status: 401 });
  }

  try {
    const request = await db.moveOutRequest.findUnique({
      where: { id: params.id },
      include: {
        room: true,
        user: {
          include: {
            bills: {
              where: { status: "UNPAID" },
            },
          },
        },
      },
    });

    if (!request) {
      return new NextResponse("Not found", { status: 404 });
    }

    return NextResponse.json(request);
  } catch (error) {
    console.error("Fetch moveout error:", error);
    return new NextResponse("Internal Server Error", { status: 500 });
  }
}

export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const role = await getRoleFromCookie();
  if (role !== "admin") {
    return new NextResponse("Unauthorized", { status: 401 });
  }

  try {
    const { status } = await req.json();

    if (!["APPROVED", "REJECTED"].includes(status)) {
      return new NextResponse("Invalid status", { status: 400 });
    }

    const request = await db.moveOutRequest.findUnique({
      where: { id: params.id },
      include: {
        room: true,
        user: true,
      },
    });

    if (!request) {
      return new NextResponse("Moveout request not found", { status: 404 });
    }

    const updated = await db.moveOutRequest.update({
      where: { id: params.id },
      data: { status },
    });

    //  ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚Üí ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á + ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (status === "APPROVED") {
      await db.room.update({
        where: { id: request.room.id },
        data: { status: "AVAILABLE", tenantId: null },
      });

      await db.profile.update({
        where: { userId: request.user.userId },
        data: { 
          roomId: null,
          isActive: false,         // ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏°‡πà active ‡πÅ‡∏•‡πâ‡∏ß
          moveOutDate: new Date(), // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        },
      });
    }

    //  ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    let message = "";
    if (status === "APPROVED") {
      message = "üì¢ ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚úÖ";
    } else if (status === "REJECTED") {
      message = "üì¢ ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‚ùå";
    }

    await db.notification.create({
      data: {
        userId: request.user.id,
        message,
        type: "MOVEOUT",
      },
    });

    return NextResponse.json(updated);
  } catch (error) {
    console.error("Update moveout error:", error);
    return new NextResponse("Failed to update moveout status", { status: 500 });
  }
}
