// src/app/api/admin/rooms/available/route.ts
import { NextResponse, type NextRequest } from "next/server";
import { db } from "@/lib/prisma";
import { checkAdminAuthOrReject } from "@/lib/auth";

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ ‚Üí ‡∏õ‡∏¥‡∏î‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const runtime = "nodejs";
export const dynamic = "force-dynamic";
export const revalidate = 0;
export const fetchCache = "force-no-store";
const noStore = {
  "Cache-Control": "no-store, no-cache, must-revalidate, private",
} as const;

export async function GET(req: NextRequest) {
  // üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  const auth = await checkAdminAuthOrReject();
  if (auth instanceof NextResponse) {
    auth.headers.set("Cache-Control", noStore["Cache-Control"]);
    return auth;
  }

  // ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô 101, 202)
  const url = new URL(req.url);
  const q = (url.searchParams.get("q") || "").trim();

  // ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà ‚Äú‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‚Äù: ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ tenant ‡∏ú‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà
  // (‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á status = "AVAILABLE" ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢)
  const rooms = await db.room.findMany({
    where: {
      status: { not: "MAINTENANCE" },
      tenant: { is: null }, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Å‡∏≤‡∏∞‡∏≠‡∏¢‡∏π‡πà
      ...(q ? { roomNumber: { contains: q, mode: "insensitive" } } : {}),
    },
    orderBy: { roomNumber: "asc" },
    select: { id: true, roomNumber: true, status: true },
  });

  return NextResponse.json(
    { success: true, rooms },
    { status: 200, headers: noStore }
  );
}
