generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCEL
}

enum MaintenanceCategory {
  ELECTRICITY
  PLUMBING
  INTERNET
  AIR_CONDITIONER
  FURNITURE
  OTHER
}

enum BillStatus {
  UNPAID           
  PENDING_APPROVAL 
  PAID             
}

enum MoveOutStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

model room {
  id                  String               @id @default(uuid())
  roomNumber          String               @unique
  status              RoomStatus           @default(AVAILABLE)

  tenantId            String?              @unique
  tenant              profile?             @relation("UserRoom", fields: [tenantId], references: [id])

  maintenanceRequests maintenanceRequest[]
  bills               bill[]               @relation("RoomBills")
  moveOutRequests     moveOutRequest[]

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model profile {
  id                  String               @id @default(uuid())
  userId              String               @unique
  email               String               @unique
  password            String
  firstName           String
  lastName            String
  phone               String
  birthday            DateTime
  address             String
  nationalId          String               @unique

  role                String               @default("user")
  roomId              String?
  room                room?                @relation("UserRoom")

  maintenanceRequests maintenanceRequest[]
  bills               bill[]               @relation("TenantBills")
  notifications       notification[]
  moveOutRequests     moveOutRequest[]

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model maintenanceRequest {
  id          String              @id @default(uuid())
  description String
  imageUrl    String?             
  imageUrls   String[]          
  status      MaintenanceStatus   @default(PENDING)
  category    MaintenanceCategory
  
  roomId      String
  userId      String
  room        room                @relation(fields: [roomId], references: [id])
  user        profile             @relation(fields: [userId], references: [id])

  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model bill {
  id             String     @id @default(uuid())
  tenantId       String
  roomId         String

  billingMonth   DateTime
  rentAmount     Float
  waterUnit      Float
  waterRate      Float
  electricUnit   Float
  electricRate   Float
  totalAmount    Float
  status         BillStatus @default(UNPAID)
  paymentSlipUrl String?
  paymentDate    DateTime?
  transactionRef String?

  tenant         profile    @relation("TenantBills", fields: [tenantId], references: [id])
  room           room       @relation("RoomBills", fields: [roomId], references: [id])

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String
  read      Boolean  @default(false)

  user      profile  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model moveOutRequest {
  id           String         @id @default(uuid())
  userId       String
  roomId       String
  reason       String
  note         String?
  moveOutDate  DateTime
  status       MoveOutStatus  @default(PENDING_APPROVAL)
  imageUrl     String?

  user         profile        @relation(fields: [userId], references: [id])
  room         room           @relation(fields: [roomId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}